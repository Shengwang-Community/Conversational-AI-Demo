# --------------------------------------------------------------------------------------------------------------------------
# =====================================
# ========== Guidelines ===============
# =====================================
#
# -------------------------------------
# ---- Common Environment Variable ----
# -------------------------------------
# ${Package_Publish} (boolean): Indicates whether it is build package process, e.g. If you want to get one CI SDK package.
# ${Clean_Clone} (boolean): Indicates whether it is clean build. If true, CI will clean ${output} for each build process.
# ${is_tag_fetch} (boolean): If true, git checkout will work as tag fetch mode.
# ${is_official_build} (boolean): Indicates whether it is official build release.
# ${arch} (string): Indicates build arch set in build pipeline.
# ${short_version} (string): CI auto generated short version string.
# ${release_version} (string): CI auto generated version string.
# ${build_date} (string(yyyyMMdd)): Build date generated by CI.
# ${build_timestamp} (string (yyyyMMdd_hhmm)): Build timestamp generated by CI.
# ${platform} (string): Build platform generated by CI.
# ${BUILD_NUMBER} (string): Build number generated by CI.
# ${WORKSPACE} (string): Working dir generated by CI.
#
# -------------------------------------
# ------- Job Custom Parameters -------
# -------------------------------------
# If you added one custom parameter via rehoboam website, e.g. extra_args.
# You could use $extra_args to get its value.
#
# -------------------------------------
# ------------- Input -----------------
# -------------------------------------
# ${source_root}: Source root which checkout the source code.
# ${WORKSPACE}: project owned private workspace.
#
# -------------------------------------
# ------------- Output ----------------
# -------------------------------------
# Generally, we should put the output files into ${WORKSPACE}
# 1. for pull request: Output files should be zipped to test.zip, and then copy to ${WORKSPACE}.
# 2. for pull request (options): Output static xml should be static_${platform}.xml, and then copy to ${WORKSPACE}.
# 3. for others: Output files should be zipped to anything_you_want.zip, and then copy it to {WORKSPACE}.
#
# -------------------------------------
# --------- Avaliable Tools -----------
# -------------------------------------
# Compressing & Decompressing: 7za a, 7za x
#
# -------------------------------------
# ----------- Test Related ------------
# -------------------------------------
# PR build, zip test related to test.zip
# Package build, zip package related to package.zip
#
# -------------------------------------
# ------ Certification Related --------
# -------------------------------------
# ./sign /Users/yy/Downloads/WayangFFmpeg_for_iOS_rel.v4.0.1_57517_20220914_0306.ipa
# This command will auto-sign the ipa specified according to project dailybuild setting on rehoboam.
# The output is:
#  ./WayangFFmpeg_for_iOS_rel.v4.0.1_57517_20220914_0306_${alias}.ipa
#
# -------------------------------------
# ------ Publish to artifactory -------
# -------------------------------------
# [Download] artifacts from artifactory:
# python3 ${WORKSPACE}/artifactory_utils.py --action=download_file --file=ARTIFACTORY_URL
#
# [Upload] artifacts to artifactory:
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=FILEPATTERN --project
# Sample Code:
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=*.zip --project
#
# [Upload] artifacts folder to artifactory
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=FILEPATTERN --project --with_folder
# Sample Code:
# python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=./folder --project --with_folder
#
# ========== Guidelines End=============
# --------------------------------------------------------------------------------------------------------------------------

# 设置全局变量
if [ -z "$WORKSPACE" ]; then
    export WORKSPACE=$(pwd)/cicd/iosExport
    export LOCALPACKAGE="true"
    mkdir -p $WORKSPACE
fi

if [ -z "$BUILD_NUMBER" ]; then
    export BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
fi

if [ -z "$APP_ID" ]; then
    export APP_ID=""
    echo "警告：APP_ID 未设置，将使用空值"
fi

if [ -z "$Package_Publish" ]; then
    export Package_Publish="false"
fi

if [ -z "$build_date" ]; then
    export build_date=$(date +%Y%m%d)
fi

if [ -z "$build_time" ]; then
    export build_time=$(date +%H%M%S)
fi

if [ -z "$release_version" ]; then
    export release_version="1.0.0"
fi

if [ -z "$short_version" ]; then
    export short_version="1.0"
fi

if [ -z "$toolbox_url" ]; then
    export toolbox_url="https://service.apprtc.cn/toolbox"
fi

if [ -z "$method" ]; then
    # export method="app-store"
    export method="development"
fi

if [ -z "$bundleId" ]; then
    export bundleId="cn.shengwang.convoai"
fi

echo Package_Publish: $Package_Publish
echo is_tag_fetch: $is_tag_fetch
echo arch: $arch
echo source_root: %source_root%
echo output: /tmp/jenkins/${project}_out
echo build_date: $build_date
echo build_time: $build_time
echo release_version: $release_version
echo short_version: $short_version
echo pwd: `pwd`
echo sdk_url: $sdk_url

PODFILE_PATH=${PWD}"/iOS/Podfile"

if [[ ! -z ${sdk_url} && "${sdk_url}" != 'none' ]]; then
    zip_name=${sdk_url##*/}
    python3 $WORKSPACE/artifactory_utils.py --action=download_file --file=$sdk_url
    unzip -o ./$zip_name -y

    unzip_name=`ls -S -d */ | grep Agora`
    echo unzip_name: $unzip_name

    mv "${PWD}/${unzip_name}/libs" "${PWD}/iOS"

    # 修改podfile文件
    python3 ./cicd/build_scripts/modify_podfile.py ${PODFILE_PATH} 'AgoraRtcEngine_iOS'
fi

./cicd/build_scripts/build_ios_ipa.sh

